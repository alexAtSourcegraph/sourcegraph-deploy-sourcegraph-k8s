apiVersion: kustomize.config.k8s.io/v1beta1
kind: Kustomization
############################################################################
#
# HOW TO USE:
#
# To configure your Sourcegraph deployment, uncomment the components/section
# below following the instruction in our configuration docs.
#
# We strongly recommend using 'sizes' components to allocate resources
#
# Docs:
# https://docs.sourcegraph.com/admin/deploy/kubernetes/kustomize/configure
#
############################################################################

# [REQUIRED] Resources for Sourcegraph with default settings
resources:
  - ../../base/sourcegraph

# [NAMESPACE] Add namespace to all resources generated by this overlay
namespace: default # NOTE: Include 'namespace' component to create namespace

# [COMPONENTS] Uncomment the lines for the components you'd like to include
components:
  - ../../components/resources/namespace # -- Create namespace based on NAMESPACE input above
  - ../../components/monitoring # -- Add default resources for monitoring stack
  - ../../components/monitoring/privileged # -- Run monitoring stack with privileged and root access
  - ../../components/monitoring/cadvisor # -- Deploy cadvisor
  - ../../components/privileged # -- Run Sourcegraph with privileged and root access
  - ../../components/sizes/xs # -- Allocate resources for size XS instance
  - ../../components/sizes/s # -- Allocate resources for size S instance
  - ../../components/sizes/m # -- Allocate resources for size M instance
  - ../../components/sizes/l # -- Allocate resources for size L instance
  - ../../components/sizes/xl # -- Allocate resources for size XL instance
  - ../../components/disable/rockskip # -- Disable rockskip
  - ../../components/enable/rockskip # -- Enable rockskip
  - ../../components/network/nodeport/30080 # -- Use nodeport 30080 for frontend
  - ../../components/ingress/frontend-loadbalancer # -- Use load balancer type for frontend
  - ../../components/remove/daemonset # -- Remove all services with daemonsets
  - ../../components/remove/default-ingress # -- Remove the default ingress from frontend
  - ../../components/remove/pvcs # -- Remove all pvcs resources
  - ../../components/remove/resources # -- Remove resources (Limits, requests) from all containers
  - ../../components/remove/security-context # -- Remove security context from all resources
  - ../../components/remove/otel-collector # -- Remove otel-collector from monitoring stack
  - ../../components/network/network-policy # -- Add NetworkPolicy
  - ../../components/network/envoy # -- Add EnvoyFilter to resolve known issues caused by service mesh
  - ../../components/utils/multi-version-upgrade # -- Scale down non-database pods to 0 for multi-version upgrade
  - ../../components/storage-class/aws # -- Create storage class resources for AWS
  - ../../components/storage-class/azure # -- Create storage class resources for azure
  - ../../components/storage-class/gcp # -- Create storage class resources for GCP
  - ../../components/storage-class/trident/ext3 # -- Create storage class resources for Trident, fsType ext3
  - ../../components/storage-class/trident/ext4 # -- Create storage class resources for Trident, fsType ext4
  - ../../components/storage-class/trident/xfs # -- Create storage class resources for Trident, fsType xfs
  - ../../components/enable/ssh/non-root # Enable SSH to clon repositories as non-root user
  - ../../components/enable/ssh/root # Enable SSH to clon repositories as root user
  - ../../components/utils/uid # -- Run all Postgres database with valid users on host
  # ------------------------------------------------------------------------
  # These components require additional input in the [OVERLAY CONFIGURATIONS]
  # section below to work. Please see the configuration docs for details
  - ../../components/enable/private-registry # -- Update images name to private registry name
  # CONFIG OPTIONS: PRIVATE_REGISTRY
  - ../../components/services/redis # -- Configure to use custom redis servers
  # CONFIG OPTIONS: REDIS_CACHE_ENDPOINT & REDIS_STORE_ENDPOINT
  - ../../components/storage-class/cloud # -- Create storage class resources for other cloud provider
  # CONFIG OPTIONS: STORAGECLASS_NAME & STORAGECLASS_PROVISIONER & STORAGECLASS_PARAM_TYPE
  - ../../components/storage-class/ssd # -- Create resources to use local SSDs - includes RBACs
  # CONFIG OPTIONS: SSD_NODE_PATH
  - ../../components/network/tls # -- Enable TLS with exisiting certificates
  # CONFIG OPTIONS: TLS_HOST & TLS_INGRESS_CLASS_NAME & TLS_CLUSTER_ISSUER
  - ../../components/ingress/hostname # -- Set hostname for your Sourcegraph ingress
  # CONFIG OPTIONS: HOST_DOMAIN
  # ------------------------------------------------------------------------
  # Keep this as the LAST component when enabling service-discovery
  - ../../components/enable/service-discovery # -- Enable service-discovery for frontend service. Recommended for clusters with RBAC enabled.
  # ------------------------------------------------------------------------

# [CUSTOM RESOURCES] Add files as patches to customize resources
#
# Create a directory `patches` and then copy the required files as
# instructed by the configuration docs to update ConfigMaps and other
# resources using patch files to customize your deployment
patchesStrategicMerge:
  - patches/frontend-ingress.annotations.yaml # Add new annotations to frontend ingress
  - patches/frontend-env-vars.yaml # Update env vars in frontend
  - patches/prometheus.ConfigMap.yaml
  - patches/pgsql.ConfigMap.yaml
  - patches/otel-collector.ConfigMap.yaml
  - patches/custom.NodePort.yaml
  - patches/resources.yaml

# [SECRETS GENERATOR] Generate secrets with local files
#
# Copy and paste all the associated files, such as `tls.crt`,
# `tls.key`, and `known_hosts`, to the root of this overlay
# secretGenerator will turn the contents of the files into Kubernetes secrets
secretGenerator:
  # Generate secrets for gitserver to use ssh
  - name: gitserver-ssh
    files:
      - id_rsa
      - known_hosts
  # Generate secrets for setting up TLS
  - name: sourcegraph-frontend-tls
    behavior: create
    files:
      - tls.crt
      - tls.key
  # Generate secrets for database
  - name: dbs-secrets
    files:
      - secrets.env

############################################################################
#
# [OVERLAY CONFIGURATIONS]
#
# Enter the configuration values as instructed by components used
# Always refer to the componentâ€™s documentation or comments before updating
#
configMapGenerator:
  # Handle updating configs using env vars for kustomize
  - name: sourcegraph-kustomize-env
    behavior: merge
    literals:
      - NAME=kustomize-configurations
      # - TLS_HOST=
      # - TLS_INGRESS_CLASS_NAME=
      # - TLS_CLUSTER_ISSUER=
      # - STORAGECLASS_NAME=
      # - STORAGECLASS_PROVISIONER=
      # - STORAGECLASS_PARAM_TYPE=
      # - PRIVATE_REGISTRY=
      # - AWS_MANAGED_CERT_ARN=
      # - GKE_MANAGED_CERT_NAME=
      # - HOST_DOMAIN=
      # - SSD_NODE_PATH=/mnt/disks/ssd0
