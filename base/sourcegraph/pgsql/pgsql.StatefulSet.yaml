apiVersion: apps/v1
kind: StatefulSet
metadata:
  annotations:
    description: Postgres database for various data.
    kubectl.kubernetes.io/default-container: pgsql
  labels:
    deploy: sourcegraph
    sourcegraph-resource-requires: no-cluster-admin
    app.kubernetes.io/component: pgsql
  name: pgsql
spec:
  serviceName: pgsql
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: pgsql
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        deploy: sourcegraph
        app: pgsql
        group: backend
    spec:
      initContainers:
        - name: correct-data-dir-permissions
          image: index.docker.io/sourcegraph/alpine-3.14:5.2.5@sha256:4bd86ec824f6238f59434cb3e00802dac14e758a6380c4f249366c4cc07d8587
          command: ["sh", "-c", "if [ -d /data/pgdata-12 ]; then chmod 750 /data/pgdata-12; fi"]
          volumeMounts:
            - mountPath: /data
              name: disk
          securityContext:
            # Required to prevent escalations to root.
            allowPrivilegeEscalation: false
            runAsUser: 999
            runAsGroup: 999
          resources:
            limits:
              cpu: "10m"
              memory: "50Mi"
            requests:
              cpu: "10m"
              memory: "50Mi"
      containers:
        - name: pgsql
          image: index.docker.io/sourcegraph/postgres-12-alpine:5.2.5@sha256:96bba3b3ef420c945c26395106bb7f543a567c6315e1ca29c65dd938d5b5d17c
          terminationMessagePolicy: FallbackToLogsOnError
          readinessProbe:
            exec:
              command:
                - /ready.sh
          livenessProbe:
            initialDelaySeconds: 15
            exec:
              command:
                - /liveness.sh
          startupProbe:
            exec:
              command:
                - /liveness.sh
            failureThreshold: 360
            periodSeconds: 10
          ports:
            - name: pgsql
              containerPort: 5432
          resources:
            limits:
              cpu: "4"
              memory: 4Gi
            requests:
              cpu: "4"
              memory: 4Gi
          securityContext:
            # Required to prevent escalations to root.
            allowPrivilegeEscalation: false
            runAsUser: 999
            runAsGroup: 999
          volumeMounts:
            - mountPath: /data
              name: disk
            - mountPath: /conf
              name: pgsql-conf
            - mountPath: /dev/shm
              name: dshm
        - env:
            - name: DATA_SOURCE_NAME
              value: postgres://sg:@localhost:5432/?sslmode=disable
            - name: PG_EXPORTER_EXTEND_QUERY_PATH
              value: /config/queries.yaml
          image: index.docker.io/sourcegraph/postgres_exporter:5.2.5@sha256:0d3bf21da6f796d563014cc4a5f6f8b57d74644920d310c26cec01cd58397a2d
          terminationMessagePolicy: FallbackToLogsOnError
          name: pgsql-exporter
          ports:
            - name: pgsql-exporter
              containerPort: 9187
          resources:
            limits:
              cpu: 10m
              memory: 50Mi
            requests:
              cpu: 10m
              memory: 50Mi
      terminationGracePeriodSeconds: 120
      securityContext:
        runAsUser: 999
        fsGroup: 999
        fsGroupChangePolicy: OnRootMismatch
      volumes:
        - name: disk
          persistentVolumeClaim:
            claimName: pgsql
        - name: pgsql-conf
          configMap:
            # 511 in decimal = 0777 in octal
            defaultMode: 511
            name: pgsql-conf
        - name: dshm # Allocate shared memory to match the shared_buffers value
          emptyDir:
            medium: Memory
            sizeLimit: 1G
